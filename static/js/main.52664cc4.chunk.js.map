{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Button","react_default","a","createElement","onClick","this","props","value","Component","Layout","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shouldComponentUpdate","prevProps","prevState","display","length","ff","substr","setState","state","lastPressed","baseState","handleClick","bind","assertThisInitialized","checkLS","localStorage","getItem","e","clickedElement","target","innerHTML","disp","math","multiply","sym","finalResult","eval","format","precision","setItem","result","_this2","className","tabIndex","ref","myDiv","App_Button","App","App_Layout","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.52664cc4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport math from \"mathjs\";\nimport \"./App.css\";\n\nclass Button extends Component {\n    render() {\n        return <button onClick={this.props.onClick}>{this.props.value}</button>;\n    }\n}\n\nclass Layout extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            display: \"0\",\n            lastPressed: \"\"\n        };\n\n        this.baseState = this.state;\n        this.handleClick = this.handleClick.bind(this);\n    }\n    resetDisplay() {\n        this.setState(this.baseState);\n    }\n    shouldComponentUpdate = (prevProps, prevState) => {\n        if (\n            prevState &&\n            prevState.display[0] === \"0\" &&\n            prevState.display.length === 2\n        ) {\n            const ff = prevState.display.substr(1);\n            this.setState({\n                display: ff\n            });\n        }\n        return true;\n    };\n\n    componentDidMount() {\n        // this.myDiv.addEventListener(\"keydown\", this.handleKey)\n        // this.myDiv.focus()\n        const checkLS = localStorage.getItem(\"finalResult\");\n        if (checkLS) {\n            this.setState({\n                display: checkLS,\n                lastPressed: \"\"\n            });\n        }\n    }\n    // componentWillUnmount() {\n    //     this.myDiv.removeEventListener('keydown', this.handleKey);\n    // }\n\n    // handleKey = e => {\n    //     console.log(e.keyCode);\n    // }\n    handleClick(e) {\n        const clickedElement = e.target.innerHTML;\n        switch (clickedElement) {\n            case \"C\":\n                this.setState({\n                    display: \"0\",\n                    lastPressed: clickedElement\n                });\n                break;\n            case \"+/-\":\n                let disp = \"\"\n                try {\n                    disp = math.multiply(-1, this.state.display)\n                }\n                catch (e) {\n                    disp = this.state.display\n                    let sym =  disp.substr(-1)\n                    disp = disp.substr(0,disp.length-1)\n                    disp = math.multiply(-1, disp)\n                    disp += sym\n                }\n                this.setState(state => ({\n                    display: disp,\n                    lastPressed: clickedElement\n                }));\n                break;\n            case \"=\":\n                let finalResult = math.eval(this.state.display);\n                finalResult = math.format(finalResult, { precision: 14 });\n                this.setState({\n                    display: finalResult,\n                    lastPressed: clickedElement\n                });\n                localStorage.setItem(\"finalResult\", finalResult);\n                break;\n            default:\n                let result = \"\";\n                result = this.state.display + clickedElement;\n                this.setState({\n                    display: result,\n                    lastPressed: clickedElement\n                });\n                break;\n        }\n    }\n    render() {\n        return (\n            <div className=\"calc-app\">\n                {/* <div className=\"calc-app-display\" tabIndex = \"1\" ref={ref => this.myDiv = ref}>{this.state.display}</div> */}\n                <div className=\"calc-app-display\" tabIndex = \"1\" ref={ref => this.myDiv = ref}>{this.state.display}</div>\n\n                <div className=\"row\">\n                    <Button value=\"C\" onClick={this.handleClick} />\n                    <Button value=\"+/-\" onClick={this.handleClick} />\n                    <Button value=\"%\" onClick={this.handleClick} />\n                    <Button value=\"/\" onClick={this.handleClick} />\n                </div>\n                <div className=\"row\">\n                    <Button value=\"7\" onClick={this.handleClick} />\n                    <Button value=\"8\" onClick={this.handleClick} />\n                    <Button value=\"9\" onClick={this.handleClick} />\n                    <Button value=\"*\" onClick={this.handleClick} />\n                </div>\n                <div className=\"row\">\n                    <Button value=\"4\" onClick={this.handleClick} />\n                    <Button value=\"5\" onClick={this.handleClick} />\n                    <Button value=\"6\" onClick={this.handleClick} />\n                    <Button value=\"-\" onClick={this.handleClick} />\n                </div>\n                <div className=\"row\">\n                    <Button value=\"1\" onClick={this.handleClick} />\n                    <Button value=\"2\" onClick={this.handleClick} />\n                    <Button value=\"3\" onClick={this.handleClick} />\n                    <Button value=\"+\" onClick={this.handleClick} />\n                </div>\n                <div className=\"row\">\n                    <Button value=\"0\" onClick={this.handleClick} />\n                    <Button value=\".\" onClick={this.handleClick} />\n                    <Button value=\"=\" onClick={this.handleClick} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    render() {\n        return <Layout />;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}