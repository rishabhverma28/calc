{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Button","react_default","a","createElement","onClick","this","props","value","Component","Layout","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shouldComponentUpdate","prevProps","prevState","display","length","ff","substr","setState","componentDidUpdate","state","lastPressed","baseState","handleClick","bind","assertThisInitialized","checkLS","localStorage","getItem","e","clickedElement","target","innerHTML","math","multiply","finalResult","eval","format","precision","setItem","result","className","App_Button","App","App_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67af6ec6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport math from 'mathjs'\nimport \"./App.css\";\n\nclass Button extends Component {\n    render() {\n        return <button onClick={this.props.onClick}>{this.props.value}</button>;\n    }\n}\n\nclass Layout extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            display: \"0\",\n            lastPressed: \"\"\n        };\n        \n        this.baseState = this.state\n        this.handleClick = this.handleClick.bind(this);\n        // this.resetDisplay = this.resetDisplay.bind(this);\n    }\n    resetDisplay() {\n        this.setState(this.baseState)\n        // debugger\n    }\n    shouldComponentUpdate = (prevProps, prevState) => {\n        // debugger\n        // console.log(\"shouldComponentUpdate\")\n        // console.log(prevState)\n        if(prevState && prevState.display[0]===\"0\" && prevState.display.length===2){\n            // return false\n            const ff = prevState.display.substr(1)\n            this.setState({\n                display: ff\n            })\n        }\n        // if(prevState && prevState.lastPressed===\"=\"){\n        //     // console.log(prevState,prevProps)\n        //     // debugger\n        //     this.setState({\n        //         display: prevState.lastPressed\n        //     })\n        // }\n        return true\n    }\n    // componentDidUpdate(prevProps, prevState) {\n    //     console.log(\"Updated\");\n    // }\n    componentDidMount() {\n        const checkLS = localStorage.getItem(\"finalResult\")\n        if(checkLS) {\n            this.setState({\n                display: checkLS,\n                lastPressed: \"\"\n            })\n        }\n    }\n    componentDidUpdate = (prevProps, prevState) => {\n        // let width = ReactDOM.findDOMNode(this).parentNode.offsetWidth\n        // if (prevState && prevState.width !== width) {\n            // this.setState({ width })\n        // }\n        // console.log(prevState.display[1])\n        // debugger\n        // if(prevState && prevState.display[0]===\"0\" && prevState.lastPressed !== \"C\"){\n        // if(prevState && prevState.display[0]===\"0\"){\n        //         // console.log(\"hh\")\n        //         debugger\n        //     const ff = prevState.display.substr(1)\n        //     if(ff.length!==0)\n        //         this.setState({\n        //             display: ff\n        //         })\n        //     }\n        // }\n        // if(prevState && prevState.lastPressed===\"=\"){\n        //     // console.log(prevState,prevProps)\n        //     this.setState({\n        //         display: \"0\"\n        //     })\n        // }\n    }\n    handleClick(e) {\n        const clickedElement = e.target.innerHTML;\n        // console.log(this.state);\n        // const operators = [\"+\", \"-\", \"*\", \"/\"]\n        // if(this.state.display === \"0\"){\n        //     debugger\n        //     this.setState({\n        //         display: \"\"\n        //     })\n        // }\n        // if(this.state.lastPressed === \"=\" && !operators.includes(clickedElement)) {\n        //     debugger\n        //     // let clearedResult = \" \"\n        //     // this.setState({\n        //     //     display: \"\"\n        //     // })\n        //     this.resetDisplay()\n        //     console.log(\"Hahhahaha\")\n        // }\n        switch (clickedElement) {\n            \n            case \"C\":\n                // debugger\n                // if(this.state.display === \"0\") {\n                    this.setState({\n                        display: \"0\",\n                        lastPressed: clickedElement\n                    })\n                // }\n                // debugger\n            break\n            case \"+/-\":\n                this.setState(state=>({\n                    display: math.multiply(-1 , state.display),\n                    lastPressed: clickedElement\n                }))\n            break\n            case \"=\":\n                // try {\n                    \n                let finalResult = math.eval(this.state.display)\n                finalResult = math.format(finalResult, { precision: 14 })\n                this.setState({\n                    display: finalResult,\n                    lastPressed: clickedElement\n                })\n                localStorage.setItem(\"finalResult\", finalResult)\n                // } catch (e) {\n                //     if (e instanceof SyntaxError) {\n                //         this.setState({\n                //             display: \"00\",\n                //             lastPressed: \"\"\n                //         })\n                //     }\n                // }\n                \n            break\n            default:\n                // if(this.state.display[0]===\"0\") {\n                //     // debugger\n                //     // const ff = this.state.display.substr(1)\n                //     // this.setState({\n                //     //     display: ff,\n                //     //     lastPressed: clickedElement\n                //     // })\n                //     this.setState((prevState, props) => {\n                //         return {display: prevState.display.substr(1) };\n                //     })\n                // }\n                let result = \"\"\n                result = this.state.display + clickedElement\n                // console.log(result)\n                this.setState({\n                    display: result,\n                    lastPressed: clickedElement\n                })\n                // console.log(\"default\")\n            break\n        }\n    }\n    render() {\n        // for(let i of numArray ) {\n        // <Button value = \"1\"/>\n        // }\n        return (\n            \n            // for(let i of numArray ) {\n            <div className=\"calc-app\">\n                <div className=\"calc-app-display\">{this.state.display}</div>\n\n                <div className=\"row\">\n                    <Button value=\"C\" onClick={this.handleClick} />\n                    <Button value=\"+/-\" onClick={this.handleClick} />\n                    <Button value=\"%\" onClick={this.handleClick} />\n                    <Button value=\"/\" onClick={this.handleClick} />\n                </div>\n                <div className=\"row\">\n                    <Button value=\"7\" onClick={this.handleClick} />\n                    <Button value=\"8\" onClick={this.handleClick} />\n                    <Button value=\"9\" onClick={this.handleClick} />\n                    <Button value=\"*\" onClick={this.handleClick} />\n                </div>\n                <div className=\"row\">\n                    <Button value=\"4\" onClick={this.handleClick} />\n                    <Button value=\"5\" onClick={this.handleClick} />\n                    <Button value=\"6\" onClick={this.handleClick} />\n                    <Button value=\"-\" onClick={this.handleClick} />\n                </div>\n                <div className=\"row\">\n                    <Button value=\"1\" onClick={this.handleClick} />\n                    <Button value=\"2\" onClick={this.handleClick} />\n                    <Button value=\"3\" onClick={this.handleClick} />\n                    <Button value=\"+\" onClick={this.handleClick} />\n                </div>\n                <div className=\"row\">\n                    <Button value=\"0\" onClick={this.handleClick} />\n                    <Button value=\".\" onClick={this.handleClick} />\n                    <Button value=\"=\" onClick={this.handleClick} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    render() {\n        return (\n            // <div className=\"App\">\n            //     <header className=\"App-header\">\n            //         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            //         <p>\n            //             Edit <code>src/App.js</code> and save to reload.\n            //         </p>\n            //         <a\n            //             className=\"App-link\"\n            //             href=\"https://reactjs.org\"\n            //             target=\"_blank\"\n            //             rel=\"noopener noreferrer\"\n            //         >\n            //             Learn React\n            //         </a>\n            //     </header>\n            // </div>\n            <Layout />\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}